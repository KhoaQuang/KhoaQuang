from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from appium import webdriver
from selenium.webdriver.common.action_chains import ActionChains
import time
#iOS
#"ip": "10.102.1.109",
#"host": "10.102.1.104",
#Android
#"ip": "10.102.1.62",
#"host": "10.102.1.30",
class WORKPLACE():
    def __init__(self):
        print("Create a object")
    def get_desired_capabilities(self,client):
        desired_capabilities_win = {
            "debugConnectToRuningApp": 'false',
            "app": r"C:/Program Files (x86)/Avaya/Avaya IX Workplace/Avaya IX Workplace.exe"
        }
        desired_capabilities_mac = {
            'platformName':'mac',  
            'commandDelay':500, 
            'loopDelay':1000, 
            'implicitTimeout':3000, 
            'mouseMoveSpeed':50, 
            "screenShotOnError":1,
            "--url-base":"wd/hub"
        }
        desired_capabilities_aea = {
			"udid": "215d1b04630d7ece",
            "platformVersion": "9",
			"deviceName":"Samsung devices",
			"platformName":"Android",
            "noReset":False,
            "automationName":"UiAutomator2",
			"appPackage": "com.avaya.android.flare",
			"appActivity":"com.avaya.android.flare.MainActivity",
            "newCommandTimeout":"200000",
			"autoGrantPermissions":True,
            "systemPort":8220,
            "--url-base":"wd/hub"
	    }
        desired_capabilities_aei = {
            #"browserName": "Chrome",
			"platformName": "iOS",
            "platformVersion": "12.2",
            "deviceName": "iPad",
            "xcodeOrgId": "65HX78R444",
            "notReset": True,
            "xcodeSigningId": "iPhone Developer",
            "automationName": "XCUITest",
            "bundleId": "com.avaya.internal.Equinox",
            "udid": "e344155913ca64b64e0f3963c1f89817b1eae496",
            "newCommandTimeout": "240"
	    }
        desired_capabilities_list = {
            "win": desired_capabilities_win,
            "mac": desired_capabilities_mac,
            "aea": desired_capabilities_aea,
            "aei": desired_capabilities_aei,
        }
        return desired_capabilities_list.get(client)
    def get_page_source(self):
        print(self.driver.page_source.encode("utf-8"))

    def launch_app(self,ip,client):
        if client == 'win':
            print('Start launch_app')
            print('Webdriver is ready')
            desired_capabilities = self.get_desired_capabilities(client)
            self.driver = webdriver.Remote(command_executor='http://'+ ip +':9999',desired_capabilities=desired_capabilities )
            print('End launch_app')
            time.sleep(3)
        elif client == 'mac':
            print('Start function launch_app')
            desired_capabilities = self.get_desired_capabilities(client)
            self.driver = webdriver.Remote(command_executor='http://'+ip+':4622',desired_capabilities=desired_capabilities)
            self.driver.get("Avaya Workplace")
        elif client in 'aea aei':
            print("Start Launch App for "+ client)
            desired_capabilities = self.get_desired_capabilities(client)
            self.driver = webdriver.Remote(command_executor='http://'+ip+':4723/wd/hub', desired_capabilities=desired_capabilities)
            print("End Launch app for "+ client)
        else:
            print("Invalid!!!!!")
            return False
    def sign_in(self,client,url,username,password,webaddress,nameuser,passwd): 
        if client == 'win':
            print("Pull configure my meeting cho WIN")
            configure_account = self.driver.find_element(By.NAME,"Configure my account")
            configure_account.click()
            print("options and my setting")
            options_setting = self.driver.find_element(By.NAME,"Options and Settings")
            options_setting.click()
            print("Click web address")
            web_address = self.driver.find_element(By.NAME,"Use web address")
            web_address.click()
            print("Input URL")
            url_address = self.driver.find_element(By.NAME,"URL")
            url_address.send_keys(url)
            print("Button Next")
            next_button = self.driver.find_element(By.NAME,"NEXT")
            next_button.click()
            time.sleep(5)
            print("Begin Input Username")
            user_name = self.driver.find_element(By.NAME,'Username')
            user_name.send_keys(username)
            print("Begin Input PASS")
            word_pass = self.driver.find_element(By.ID,"PasswordBox")
            time.sleep(2)
            word_pass.send_keys(password)
            time.sleep(2)
            print("Click Next")
            nexttt_button = self.driver.find_element(By.NAME,"NEXT")
            nexttt_button.click()
        elif client == 'mac':
            print("Pull configure my meeting MAC")
            configure = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3LoginWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXButton[@AXTitle='Configure my account']")
            meeting_configure = ActionChains(self.driver)
            meeting_configure.move_to_element(configure)
            meeting_configure.click()
            meeting_configure.perform()
            meeting_configure.release()
            meeting_configure.reset_actions()
            print("Choose setting")
            choose_setting = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3LoginWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXButton[@AXIdentifier='UCC3AutomationLoginSettingsButtonIdentifier']")
            setting_choose = ActionChains(self.driver)
            setting_choose.move_to_element(choose_setting)
            setting_choose.click()
            setting_choose.perform()
            setting_choose.release()
            setting_choose.reset_actions()
            print("Button user web address")
            user_web_address = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXSubrole='AXUnknown']/AXButton[@AXTitle='Use a web address' and @AXIdentifier='UCC3AutomationLoginAutomaticConfigurationButtonIdentifier']") 
            web_address_user = ActionChains(self.driver)
            web_address_user.move_to_element(user_web_address)
            web_address_user.click()
            web_address_user.perform()
            web_address_user.release()
            web_address_user.reset_actions()
            print("Input web address")
            web_address = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3LoginWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXStaticText[@AXValue='WEB ADDRESS' and @AXIdentifier='UCC3AutomationLoginLabelIdentifier']")
            address_web = ActionChains(self.driver)
            address_web.move_to_element(web_address)
            address_web.click()
            address_web.send_keys(webaddress)
            address_web.perform()
            address_web.release()
            address_web.reset_actions()
            print("Button next")
            nextt_button = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3LoginWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXButton[@AXTitle='NEXT' and @AXIdentifier='UCC3AutomationLoginNextButtonIdentifier']")            
            button_nextt = ActionChains(self.driver)
            button_nextt.move_to_element(nextt_button)
            button_nextt.click()
            button_nextt.perform()
            button_nextt.release()
            button_nextt.reset_actions()
            time.sleep(3)
            print("Input user name")
            user_name = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3LoginWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXStaticText[@AXValue='USERNAME' and @AXIdentifier='UCC3AutomationLoginLabelIdentifier']")
            name_user = ActionChains(self.driver)
            name_user.move_to_element(user_name)
            name_user.click()
            name_user.send_keys(nameuser)
            name_user.perform()
            name_user.release()
            name_user.reset_actions()
            print("Input password")
            pass_word = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3LoginWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXStaticText[@AXValue='PASSWORD' and @AXIdentifier='UCC3AutomationLoginLabelIdentifier']")
            word_pass = ActionChains(self.driver)
            word_pass.move_to_element(pass_word)
            word_pass.click()
            word_pass.send_keys(passwd)
            word_pass.perform()
            word_pass.release()
            word_pass.reset_actions()
            time.sleep(5)
            print("Button next")
            next_button = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3LoginWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXButton[@AXTitle='NEXT' and @AXIdentifier='UCC3AutomationLoginNextButtonIdentifier']")
            button_next = ActionChains(self.driver)
            button_next.move_to_element(next_button)
            button_next.click()
            button_next.perform()
            button_next.release()
            button_next.reset_actions()
            time.sleep(15)
            print("Button skip")
            skip_button = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXTitle='Window' and @AXIdentifier='_NS:6' and @AXSubrole='AXStandardWindow']/AXButton[@AXTitle='SKIP TUTORIAL' and @AXIdentifier='UCC3AutomationTutorialSkipButtonIdentifier']")
            button_skip = ActionChains(self.driver)
            button_skip.move_to_element(skip_button)
            button_skip.click()
            button_skip.perform()
            button_skip.release()
            button_skip.reset_actions()
        elif client == 'aea':
            # print("Pull Configure my account cho android")
            # configure_account = self.driver.find_element(By.ID,"com.avaya.android.flare:id/configure_account")
            # configure_account.click()
            print("options and my setting")
            options_mysetting = self.driver.find_element(By.ID,"com.avaya.android.flare:id/settings_icon")
            options_mysetting.click()
            print("Click use web address")
            web_address = self.driver.find_element(By.ID,"com.avaya.android.flare:id/popoverButton1")
            web_address.click()
            print("Input URL")
            url_address = self.driver.find_element(By.ID,"com.avaya.android.flare:id/auto_config_address")
            url_address.send_keys(url)
            time.sleep(10)
            print("Button Next")
            next_button = self.driver.find_element(By.ID,"com.avaya.android.flare:id/connect_button")
            next_button.click()
            time.sleep(10)
            print("Begin Input Username")
            user_name = self.driver.find_element(By.ID,"com.avaya.android.flare:id/service_username")
            user_name.send_keys(username)
            print("Begin Input PASS")
            word_pass = self.driver.find_element(By.ID,"com.avaya.android.flare:id/service_password")
            word_pass.send_keys(password)
            print("Button sign in")
            sign_in = self.driver.find_element(By.ID,"com.avaya.android.flare:id/connect_button")
            sign_in.click()
            time.sleep(8)
            print("Start meeting")
            start_meeting = self.driver.find_element(By.ID,"com.avaya.android.flare:id/my_meeting_id")
            start_meeting.click()
            time.sleep(3)
            print("Join")
            join_button = self.driver.find_element(By.ID,"com.avaya.android.flare:id/join_meeting")
            join_button.click()
            time.sleep(8)
        elif client == 'aei':
            print("Join a meeting Workplace")
            print("Input your name")
            user_name = self.driver.find_element(By.ID,"yourNameTextField")
            user_name.click()
            user_name.clear()
            user_name.send_keys(username)
            print("Input Meeting ID")
            meeting_id = self.driver.find_element(By.ID,"meetingIDTextField")
            meeting_id.click()
            meeting_id.clear()
            meeting_id.send_keys(password)
            time.sleep(5)
            print("Input Meeting address")
            meeting_address = self.driver.find_element(By.ID,"meetingAddressTextField")
            meeting_address.click()
            meeting_address.clear()
            meeting_address.send_keys(webaddress)
            time.sleep(15)
            print("Button join")
            button_join = self.driver.find_element(By.ID,"joinMeetingButton")
            button_join.click() 
        else:
            print("Invalid!!!!!")
            return False
    def start_my_meeting(self): 
        print("Choose room 322006000")
        choose_room = self.driver.find_element(By.NAME,"322006000")
        choose_room.click()
        print("Begin join")
        join_button = self.driver.find_element(By.NAME,"Join")
        join_button.click()
        time.sleep(5)
    def join_meeting(self,meetingid):  
        print("Click avaya workplace")
        avaya_click = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXTitle='Avaya Workplace' and @AXIdentifier='UCC3MainWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXSplitGroup[0]/AXStaticText[@AXValue='Avaya Workplace']")
        click_avaya = ActionChains(self.driver)
        click_avaya.move_to_element(avaya_click)
        click_avaya.click()
        click_avaya.release()
        click_avaya.reset_actions()
        ActionChains(self.driver).move_to_element_with_offset(avaya_click,9,0).double_click().perform()
        time.sleep(5)
        print("Choose join workplace meeting")
        join_meeting_wplace = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXTitle='Avaya Workplace' and @AXIdentifier='UCC3MainWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXSplitGroup[0]/AXScrollArea[0]/AXTable[0]/AXRow[@AXSubrole='AXTableRow']/AXCell[0]/AXLayoutArea[@AXIdentifier='_NS:9']/AXButton[0]")
        join_wplace = ActionChains(self.driver)
        join_wplace.move_to_element(join_meeting_wplace)
        join_wplace.click()
        join_wplace.perform()
        join_wplace.release()
        join_wplace.reset_actions()
        print("Join meeting workplace successfully!!!")
        print("Begin input meeting ID")
        id_meeting = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3MainWindowIdentifier']/AXSplitGroup[0]/AXScrollArea[0]/AXStaticText[@AXValue='Meeting ID']")
        meeting_id = ActionChains(self.driver)
        meeting_id.move_to_element(id_meeting)
        meeting_id.click()
        meeting_id.send_keys(meetingid)
        meeting_id.perform()
        meeting_id.release()
        meeting_id.reset_actions()
        print("Input meeting ID successfully!!!")
        time.sleep(8)
        print("Begin button join")
        join = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3MainWindowIdentifier']/AXSplitGroup[0]/AXScrollArea[0]/AXButton[@AXTitle='Join']")
        join_1 = ActionChains(self.driver)
        join_1.move_to_element(join)
        join_1.click()
        join_1.perform()
        join_1.release()
        join_1.reset_actions()
        print("Join successfully!!!")      
        time.sleep(15)   
    def mute_audio_block_video_drop(self,client):
        if client == 'win':
            print("Click user MAC")
            click_user = self.driver.find_element(By.NAME,"auto2006001 Scopia")
            #("auto2006001 Scopia, Talking moderator")
            click_user.click()
            print("Click button...")
            options_more = self.driver.find_element(By.NAME,"More options...")
            options_more.click()
            print("Click mute")
            mute = self.driver.find_element(By.NAME,"Mute")
            mute.click()
            print("Block video")
            video_block = self.driver.find_element(By.NAME,"Block video")
            video_block.click()
            print("Drop from call")
            drop_call = self.driver.find_element(By.NAME,"Drop from call")
            drop_call.click()
            print("Drop")
            drop = self.driver.find_element(By.NAME,"Drop")
            drop.click()
        if client == 'aea':
            print("Button Participants")
            Participants = self.driver.find_element(By.ID,"com.avaya.android.flare:id/activecall_conf_roster_button")
            Participants.click()
            time.sleep(5)
            print("Click user IOS")
            click_user = self.driver.find_element(By.XPATH,"/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.drawerlayout.widget.DrawerLayout/android.widget.RelativeLayout/android.widget.FrameLayout[2]/android.widget.LinearLayout/android.widget.ListView/android.widget.LinearLayout[2]/android.widget.LinearLayout/android.widget.TableLayout/android.widget.TableRow")
            #("auto2006001 Scopia, Talking moderator")
            click_user.click()
            print("Click mute")
            mute = self.driver.find_element(By.ID,"com.avaya.android.flare:id/list_item_name")
            mute.click()
            time.sleep(3)
            print("Click user IOS")
            click_user = self.driver.find_element(By.XPATH,"/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.drawerlayout.widget.DrawerLayout/android.widget.RelativeLayout/android.widget.FrameLayout[2]/android.widget.LinearLayout/android.widget.ListView/android.widget.LinearLayout[2]/android.widget.LinearLayout/android.widget.TableLayout/android.widget.TableRow")
            click_user.click()
            time.sleep(3)
            print("Drop from call")
            drop_call = self.driver.find_element(By.XPATH,"/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.ListView/android.widget.LinearLayout[4]/android.widget.RelativeLayout/android.widget.TextView")
            drop_call.click()
            time.sleep(3)
            print("Drop")
            drop = self.driver.find_element(By.ID,"com.avaya.android.flare:id/list_item_name")
            drop.click()
            time.sleep(3)
            hide = self.driver.find_element(By.ID,"com.avaya.android.flare:id/hide")
            hide.click()
            time.sleep(3)
    def terminate_meeting(self,client):
        if client == 'win':
            print("Click icon user")
            conference_menu = self.driver.find_element(By.NAME,"Conference Menu")
            conference_menu.click()
            print("Choose meeting control") 
            control_meeting = self.driver.find_element(By.NAME,"Meeting Controls")
            control_meeting.click()
            print("End Meeting")
            end_meeting = self.driver.find_element(By.NAME,"End Meeting")
            end_meeting.click()
            print("Button End")
            END = self.driver.find_element(By.NAME,"End")
            END.click()
            time.sleep(5)
        elif client == 'aea':
            print("Choose ---")
            choose_select = self.driver.find_element(By.ID,"com.avaya.android.flare:id/show_advanced_controls")
            choose_select.click()
            print("Select")
            cham_gach = self.driver.find_element(By.ID,"com.avaya.android.flare:id/activecall_advctrl_confctrl")
            cham_gach.click()
            time.sleep(8)
            print("End meeting")
            end_meeting = self.driver.find_element(By.XPATH,"//android.widget.LinearLayout[@content-desc='END MEETING']/android.widget.LinearLayout")
            end_meeting.click()
            time.sleep(5)
            print("Click OK") 
            time.sleep(5)
            ok_1 = self.driver.find_element(By.ID,"com.avaya.android.flare:id/dialog_ok_button")
            ok_1.click()
            time.sleep(8)
            print("Continue click OK")
            ok_2 = self.driver.find_element(By.ID,"com.avaya.android.flare:id/confirmation_dialog_button")
            ok_2.click()
            time.sleep(5)
    def reset_app(self,client):
        if client == 'win':
            print("options and my setting")
            options_mysetting = self.driver.find_element(By.NAME,'Options and Settings')
            options_mysetting.click()
            print("Choose support")
            support_button = self.driver.find_element(By.NAME,'Support')
            support_button.click()
            time.sleep(3)
            print("Button reset application")
            reset_appication = self.driver.find_element(By.NAME,'Reset Application')
            reset_appication.click()
            time.sleep(3)
            print("Button clear")
            clear_button = self.driver.find_element(By.NAME,'Clear')
            clear_button.click()
        elif client == 'mac':
            print("Begin close workplace!!!")
            close_mac = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXTitle='Avaya Workplace' and @AXIdentifier='UCC3MainWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXSplitGroup[0]/AXButton[@AXIdentifier='UCC3AutomationMainWindowSettingsButton']")
            mac_close = ActionChains(self.driver)
            mac_close.move_to_element(close_mac)
            mac_close.click()
            mac_close.perform()
            mac_close.release()
            mac_close.reset_actions()
            time.sleep(3)
            close_mac1 = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXTitle='Avaya Workplace Settings' and @AXIdentifier='UCC3ConfigurationWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXScrollArea[@AXIdentifier='_NS:194']/AXTable[@AXIdentifier='_NS:54']/AXRow[@AXSubrole='AXTableRow']/AXCell[0]/AXStaticText[@AXValue='Support' and @AXIdentifier='Support preferences']")
            mac1_close = ActionChains(self.driver)
            mac1_close.move_to_element(close_mac1)
            mac1_close.click()
            mac1_close.perform()
            mac1_close.release()
            mac1_close.reset_actions()
            time.sleep(3)
            close_mac2 = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXTitle='Avaya Workplace Settings' and @AXIdentifier='UCC3ConfigurationWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXScrollArea[@AXIdentifier='_NS:109']/AXTable[@AXIdentifier='_NS:115']/AXRow[@AXSubrole='AXTableRow']/AXCell[0]/AXButton[@AXTitle='Reset Application' and @AXIdentifier='UCC3AutomationConfigurationShowDetailsIdentifier']")
            mac2_close = ActionChains(self.driver)
            mac2_close.move_to_element(close_mac2)
            mac2_close.click()
            mac2_close.perform()
            mac2_close.release()
            mac2_close.reset_actions()
            time.sleep(3)
            close_mac3 = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXTitle='Avaya Workplace Settings' and @AXIdentifier='UCC3ConfigurationWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXSheet[@AXIdentifier='UCC3AlertWindowIdentifier']/AXLayoutArea[@AXIdentifier='UCC3AutomationAlertViewResetIdentifier']/AXButton[@AXTitle='Reset']")
            mac3_close = ActionChains(self.driver)
            mac3_close.move_to_element(close_mac3)
            mac3_close.click()
            mac3_close.perform()
            mac3_close.release()
            mac3_close.reset_actions()
            print("Workplace finished!!!")
        elif client == 'aea':
            print("Choose menu")
            menu_3 = self.driver.find_element(By.XPATH,"//android.widget.ImageButton[@content-desc='menu']")
            time.sleep(8)
            menu_3.click()
            print("options and my setting")
            options_mysetting = self.driver.find_element(By.ID,"com.avaya.android.flare:id/nav_header_settings")
            options_mysetting.click()
            print("Button support")
            support_button = self.driver.find_element(By.XPATH,"/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.recyclerview.widget.RecyclerView/android.widget.LinearLayout[5]/android.widget.RelativeLayout")
            support_button.click()
            time.sleep(3)
            print("Button reset application")
            reset_appication = self.driver.find_element(By.XPATH,"/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.recyclerview.widget.RecyclerView/android.widget.FrameLayout/android.widget.TextView")
            reset_appication.click()
            time.sleep(3)
            print("Button click ok")
            ok_button = self.driver.find_element(By.ID,"android:id/button1")
            ok_button.click()
        # elif client == 'aei':
            
        else:
            print("Invalid!!!!!")
            return False            
        
anroid = WORKPLACE()
ios = WORKPLACE()
#anroid.launch_app(ip="10.102.1.30",client='win')
anroid.launch_app(ip="10.102.1.30",client='aea')
ios.launch_app(ip="10.102.1.104",client='aei')
# ios.get_page_source()
# anroid.sign_in(url="http://10.102.2.58/hfs/auto_conf_iview126.txt",username="auto2006000",password="RAPtor1234",webaddress=None,nameuser=None,passwd=None)
anroid.sign_in(client='aea',url="http://10.102.2.58/hfs/auto_conf_iview126.txt",username="auto2006000",password="RAPtor1234",webaddress=None,nameuser=None,passwd=None)
ios.sign_in(client='aei',username="Khoa",webaddress="https://aawg-mt-virtual.hcm.com/portal/tenants/dc1/",password="322006000",url=None,nameuser=None,passwd=None)
anroid.mute_audio_block_video_drop(client='aea')
anroid.terminate_meeting(client='aea')
anroid.reset_app(client='aea')
# ios.reset_app(client='aei')
# win1 = WORKPLACE()
# mac1 = WORKPLACE()
# win1.launch_app(ip="10.102.1.25")
# mac1.launch_app(ip="10.102.1.104")

# mac1.sign_in(webaddress="http://10.102.2.58/hfs/auto_conf_iview126.txt",nameuser="auto2006001",passwd="RAPtor1234",ip="10.102.1.104",url=None,username=None,password=None)
# win1.start_my_meeting()
# mac1.join_meeting(meetingid="322006000")
# win1.mute_audio_block_video_drop()
# win1.terminate_meeting()
# win1.reset_app(ip="10.102.1.25")
# mac1.reset_app(ip="10.102.1.104")
    