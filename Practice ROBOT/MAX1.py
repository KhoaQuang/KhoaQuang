from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
import time

https://aawg-mt-virtual.hcm.com/portal/tenants/dc1/
class WORKPLACE():
    def __init__(self):
        print("Create a object")
    def get_desired_capabilities(self,client):
        desired_capabilities_win = {
            "debugConnectToRuningApp": 'false',
            "app": r"C:/Program Files (x86)/Avaya/Avaya IX Workplace/Avaya IX Workplace.exe"
        }
        desired_capabilities_aea = {
			"udid": "215d1b04630d7ece",
            "platformVersion": "9",
			"deviceName":"Samsung devices",
			"platformName":"Android",
            "noReset":False,
            "automationName":"UiAutomator2",
			"appPackage": "com.avaya.android.flare",
			"appActivity":"com.avaya.android.flare.MainActivity",
            "newCommandTimeout":"200000",
			"autoGrantPermissions":True,
            "systemPort":8220,
            "--url-base":"wd/hub"
	    }
        desired_capabilities_list = {
            "win": desired_capabilities_win,
            "aea": desired_capabilities_aea,
        }
        return desired_capabilities_list.get(client)
    def prepare_webdriver(self,ip):
        print('Webdriver is ready')
        profile_temp = webdriver.ChromeOptions()
        profile_temp.accept_untrusted_cert = True
        profile_temp.add_argument("--lang=en")
        profile_temp.add_argument("--disable-application-cache")
        profile_temp.add_argument("start-maximized")
        self.cap = profile_temp.to_capabilities()
        self.cap['goog:loggingPrefs'] = { 'browser':'ALL' }
        self.driver = webdriver.Remote(command_executor='http://localhost:4444/wd/hub',desired_capabilities=self.cap)    
        print('Webdriver was created')
    def launch_app(self,ip,client):
        if client == 'win':
            print('Start launch_app'+ client)
            print('Webdriver is ready')
            desired_capabilities = self.get_desired_capabilities(client)
            self.driver = webdriver.Remote(command_executor='http://'+ ip +':9999',desired_capabilities=desired_capabilities )
            print("End Launch app for "+ client)
            time.sleep(3)
        elif client in 'aea aei':
            print("Start Launch App for "+ client)
            desired_capabilities = self.get_desired_capabilities(client)
            self.driver = webdriver.Remote(command_executor='http://'+ip+':4723/wd/hub', desired_capabilities=desired_capabilities)
            print("End Launch app for "+ client)
        else:
            print("Invalid!!!!!")
            return False
    def launch_browser(self,ip=None,url=None):
        print('Start launch_browser')
        self.prepare_webdriver(ip)
        self.driver.get(url)
        print('End launch_browser')
        return True
    def sign_in(self,client,url,username,password,webaddress,nameuser,passwd): 
        if client == 'win':
            print("Pull configure my meeting cho WIN")
            configure_account = self.driver.find_element(By.NAME,"Configure my account")
            configure_account.click()
            print("options and my setting")
            options_setting = self.driver.find_element(By.NAME,"Options and Settings")
            options_setting.click()
            print("Click web address")
            web_address = self.driver.find_element(By.NAME,"Use web address")
            web_address.click()
            print("Input URL")
            url_address = self.driver.find_element(By.NAME,"URL")
            url_address.send_keys(url)
            print("Button Next")
            next_button = self.driver.find_element(By.NAME,"NEXT")
            next_button.click()
            time.sleep(5)
            print("Begin Input Username")
            user_name = self.driver.find_element(By.NAME,'Username')
            user_name.send_keys(username)
            print("Begin Input PASS")
            word_pass = self.driver.find_element(By.ID,"PasswordBox")
            time.sleep(2)
            word_pass.send_keys(password)
            time.sleep(2)
            print("Click Next")
            nexttt_button = self.driver.find_element(By.NAME,"NEXT")
            nexttt_button.click()
        elif client == 'mac':
            print("Pull configure my meeting MAC")
            configure = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3LoginWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXButton[@AXTitle='Configure my account']")
            meeting_configure = ActionChains(self.driver)
            meeting_configure.move_to_element(configure)
            meeting_configure.click()
            meeting_configure.perform()
            meeting_configure.release()
            meeting_configure.reset_actions()
            print("Choose setting")
            choose_setting = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3LoginWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXButton[@AXIdentifier='UCC3AutomationLoginSettingsButtonIdentifier']")
            setting_choose = ActionChains(self.driver)
            setting_choose.move_to_element(choose_setting)
            setting_choose.click()
            setting_choose.perform()
            setting_choose.release()
            setting_choose.reset_actions()
            print("Button user web address")
            user_web_address = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXSubrole='AXUnknown']/AXButton[@AXTitle='Use a web address' and @AXIdentifier='UCC3AutomationLoginAutomaticConfigurationButtonIdentifier']") 
            web_address_user = ActionChains(self.driver)
            web_address_user.move_to_element(user_web_address)
            web_address_user.click()
            web_address_user.perform()
            web_address_user.release()
            web_address_user.reset_actions()
            print("Input web address")
            web_address = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3LoginWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXStaticText[@AXValue='WEB ADDRESS' and @AXIdentifier='UCC3AutomationLoginLabelIdentifier']")
            address_web = ActionChains(self.driver)
            address_web.move_to_element(web_address)
            address_web.click()
            address_web.send_keys(webaddress)
            address_web.perform()
            address_web.release()
            address_web.reset_actions()
            print("Button next")
            nextt_button = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3LoginWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXButton[@AXTitle='NEXT' and @AXIdentifier='UCC3AutomationLoginNextButtonIdentifier']")            
            button_nextt = ActionChains(self.driver)
            button_nextt.move_to_element(nextt_button)
            button_nextt.click()
            button_nextt.perform()
            button_nextt.release()
            button_nextt.reset_actions()
            time.sleep(3)
            print("Input user name")
            user_name = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3LoginWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXStaticText[@AXValue='USERNAME' and @AXIdentifier='UCC3AutomationLoginLabelIdentifier']")
            name_user = ActionChains(self.driver)
            name_user.move_to_element(user_name)
            name_user.click()
            name_user.send_keys(nameuser)
            name_user.perform()
            name_user.release()
            name_user.reset_actions()
            print("Input password")
            pass_word = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3LoginWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXStaticText[@AXValue='PASSWORD' and @AXIdentifier='UCC3AutomationLoginLabelIdentifier']")
            word_pass = ActionChains(self.driver)
            word_pass.move_to_element(pass_word)
            word_pass.click()
            word_pass.send_keys(passwd)
            word_pass.perform()
            word_pass.release()
            word_pass.reset_actions()
            time.sleep(5)
            print("Button next")
            next_button = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3LoginWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXButton[@AXTitle='NEXT' and @AXIdentifier='UCC3AutomationLoginNextButtonIdentifier']")
            button_next = ActionChains(self.driver)
            button_next.move_to_element(next_button)
            button_next.click()
            button_next.perform()
            button_next.release()
            button_next.reset_actions()
            time.sleep(15)
            print("Button skip")
            skip_button = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXTitle='Window' and @AXIdentifier='_NS:6' and @AXSubrole='AXStandardWindow']/AXButton[@AXTitle='SKIP TUTORIAL' and @AXIdentifier='UCC3AutomationTutorialSkipButtonIdentifier']")
            button_skip = ActionChains(self.driver)
            button_skip.move_to_element(skip_button)
            button_skip.click()
            button_skip.perform()
            button_skip.release()
            button_skip.reset_actions()
        elif client == 'aea':
            # print("Pull Configure my account cho android")
            # configure_account = self.driver.find_element(By.ID,"com.avaya.android.flare:id/configure_account")
            # configure_account.click()
            print("options and my setting")
            options_mysetting = self.driver.find_element(By.ID,"com.avaya.android.flare:id/settings_icon")
            options_mysetting.click()
            print("Click use web address")
            web_address = self.driver.find_element(By.ID,"com.avaya.android.flare:id/popoverButton1")
            web_address.click()
            print("Input URL")
            url_address = self.driver.find_element(By.ID,"com.avaya.android.flare:id/auto_config_address")
            url_address.send_keys(url)
            time.sleep(10)
            print("Button Next")
            next_button = self.driver.find_element(By.ID,"com.avaya.android.flare:id/connect_button")
            next_button.click()
            time.sleep(10)
            print("Begin Input Username")
            user_name = self.driver.find_element(By.ID,"com.avaya.android.flare:id/service_username")
            user_name.send_keys(username)
            print("Begin Input PASS")
            word_pass = self.driver.find_element(By.ID,"com.avaya.android.flare:id/service_password")
            word_pass.send_keys(password)
            print("Button sign in")
            sign_in = self.driver.find_element(By.ID,"com.avaya.android.flare:id/connect_button")
            sign_in.click()
            time.sleep(8)
            # print("Start meeting")
            # start_meeting = self.driver.find_element(By.ID,"com.avaya.android.flare:id/my_meeting_id")
            # start_meeting.click()
            # time.sleep(3)
            # print("Join")
            # join_button = self.driver.find_element(By.ID,"com.avaya.android.flare:id/join_meeting")
            # join_button.click()
            # time.sleep(8)

    def start_my_meeting(self): 
        print("Choose room 322006000")
        choose_room = self.driver.find_element(By.NAME,"322006000")
        choose_room.click()
        print("Begin join")
        join_button = self.driver.find_element(By.NAME,"Join")
        join_button.click()
        time.sleep(5)
    def join_meeting(self,client,name,meetingid):  
        if client == 'mac':
            print("Click avaya workplace")
            avaya_click = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXTitle='Avaya Workplace' and @AXIdentifier='UCC3MainWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXSplitGroup[0]/AXStaticText[@AXValue='Avaya Workplace']")
            click_avaya = ActionChains(self.driver)
            click_avaya.move_to_element(avaya_click)
            click_avaya.click()
            click_avaya.release()
            click_avaya.reset_actions()
            ActionChains(self.driver).move_to_element_with_offset(avaya_click,9,0).double_click().perform()
            time.sleep(5)
            print("Choose join workplace meeting")
            join_meeting_wplace = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXTitle='Avaya Workplace' and @AXIdentifier='UCC3MainWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXSplitGroup[0]/AXScrollArea[0]/AXTable[0]/AXRow[@AXSubrole='AXTableRow']/AXCell[0]/AXLayoutArea[@AXIdentifier='_NS:9']/AXButton[0]")
            join_wplace = ActionChains(self.driver)
            join_wplace.move_to_element(join_meeting_wplace)
            join_wplace.click()
            join_wplace.perform()
            join_wplace.release()
            join_wplace.reset_actions()
            print("Join meeting workplace successfully!!!")
            print("Begin input meeting ID")
            id_meeting = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3MainWindowIdentifier']/AXSplitGroup[0]/AXScrollArea[0]/AXStaticText[@AXValue='Meeting ID']")
            meeting_id = ActionChains(self.driver)
            meeting_id.move_to_element(id_meeting)
            meeting_id.click()
            meeting_id.send_keys(meetingid)
            meeting_id.perform()
            meeting_id.release()
            meeting_id.reset_actions()
            print("Input meeting ID successfully!!!")
            time.sleep(8)
            print("Begin button join")
            join = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3MainWindowIdentifier']/AXSplitGroup[0]/AXScrollArea[0]/AXButton[@AXTitle='Join']")
            join_1 = ActionChains(self.driver)
            join_1.move_to_element(join)
            join_1.click()
            join_1.perform()
            join_1.release()
            join_1.reset_actions()
            print("Join successfully!!!")      
            time.sleep(15)   
        elif client == 'aea':
            print("Choose join workplace meeting")
            join_meeting_wplace = self.driver.find_element(By.ID,"com.avaya.android.flare:id/join_other_meeting_layout")
            join_meeting_wplace.click()
            print("Input your name")
            your_name = self.driver.find_element(By.ID,"com.avaya.android.flare:id/name")
            your_name.click()
            your_name.clear()
            your_name.send_keys(name)
            print("Input meeting id")
            id_meeting = self.driver.find_element(By.ID,"com.avaya.android.flare:id/meeting_id")
            id_meeting.click()
            id_meeting.clear()
            id_meeting.send_keys(meetingid)
            print("Begin button join")
            join_meeting_wplace = self.driver.find_element(By.ID,"com.avaya.android.flare:id/join_meeting")
            join_meeting_wplace.click()
        else:
            print("Invalid!!!!!")
            return False
    def users_block_unblock_video(self):
        # if client == 'win':
        print("Block camera for win")
        block_camera = self.driver.find_element(By.NAME,"Block camera")
        block_camera.click()
        print("UnBlock camera for win")
        unblock_camera = self.driver.find_element(By.NAME,"Unblock camera")
        unblock_camera.click()
        print("Click user for mac")
        click_user_mac = self.driver.find_element(By.ID,"ConferenceItem(Moderator_auto2006001 Scopia)")
        click_user_mac.click()
        print("Click button...")
        options_more = self.driver.find_element(By.NAME,"More options...")
        options_more.click()
        print("Block video for mac")
        video_block = self.driver.find_element(By.NAME,"Block video")
        video_block.click()
        print("UnBlock video for mac")
        video_unblock = self.driver.find_element(By.NAME,"Block video")
        video_unblock.click()
        print("Click user for android")
        click_user_aea = self.driver.find_element(By.NAME,"auto2006002 Scopia")
        click_user_aea.click()
        print("Click button...")
        options_more = self.driver.find_element(By.NAME,"More options...")
        options_more.click()
        print("Block video for android")
        video_block = self.driver.find_element(By.NAME,"Block video")
        video_block.click()
        print("UnBlock video for android")
        video_unblock = self.driver.find_element(By.NAME,"Block video")
        video_unblock.click()
    #     elif client == 'mac':
    #     elif client == 'aea':
    def win_share_screen(self):
        print("Begin share screen")
        share_screen= self.driver.find_element(By.NAME,"Start Sharing")
        share_screen.click()
        display = self.driver.find_element(By.NAME,"Display 1 (Primary)")
        display.click()
    def mac_leave_rejoin(self):
        print("Button end")
        time.sleep(5)
        call_end = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3ConferenceWindowIdentifier']/AXCheckBox[@AXIdentifier='UCC3AutomationConferenceRosterLeaveConferenceButtonIdentifier']")
        end_call = ActionChains(self.driver)
        end_call.move_to_element(call_end)
        end_call.click()
        end_call.perform()
        end_call.release()
        end_call.reset_actions()
        print("Call Ended")
        time.sleep(8)
        print("Begin button join")
        join = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3MainWindowIdentifier']/AXSplitGroup[0]/AXScrollArea[0]/AXButton[@AXTitle='Join']")
        join_1 = ActionChains(self.driver)
        join_1.move_to_element(join)
        join_1.click()
        join_1.perform()
        join_1.release()
        join_1.reset_actions()
        print("Join successfully!!!")     
    def all_participants_chat(self,chat):
        if client == 'win':
            print("Input chat from win")
            chat_win = self.driver.find_element(By.ID,"MessageTextBox")
            chat_win.send_keys(chat)
            chat_win.send_keys(Key.ENTER)
            print("Send successfully")
        elif client == 'mac':
            print("Input chat from mac")
            chat_mac = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXTitle='41:00  322006000' and @AXIdentifier='UCC3ConferenceWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXScrollArea[1]/AXTextArea[@AXIdentifier='UCC3AutomationConferenceRosterChatInputTextViewIdentifier']")
            mac_chat = ActionChains(self.driver)
            mac_chat.move_to_element(chat_mac)
            mac_chat.click()
            mac_chat.send_keys(chat)
            mac_chat.send_keys(Key.ENTER)
            mac_chat.perform()
            mac_chat.release()
            mac_chat.reset_actions()
            print("Send successfully")
        elif client == 'aea':
            print("Input chat from android")
            chat_aea = self.driver.find_element(By.ID,"com.avaya.android.flare:id/activecall_conf_chat_button")
            chat_aea.click()
            input_chat = self.driver.find_element(By.ID,"com.avaya.android.flare:id/message_input_area")
            input_chat.click()
            input_chat.send_keys(chat)
            print("Send successfully")
            send_chat = self.driver.find_element(By.ID,"com.avaya.android.flare:id/messaging_message_send_button")
            send_chat.click()
            
    def terminate_meeting(self,client):
        if client == 'win':
            print("Click icon user")
            conference_menu = self.driver.find_element(By.NAME,"Conference Menu")
            conference_menu.click()
            print("Choose meeting control") 
            control_meeting = self.driver.find_element(By.NAME,"Meeting Controls")
            control_meeting.click()
            print("End Meeting")
            end_meeting = self.driver.find_element(By.NAME,"End Meeting")
            end_meeting.click()
            print("Button End")
            END = self.driver.find_element(By.NAME,"End")
            END.click()
            time.sleep(5)
        elif client == 'mac':
            print("Begin button join meeting")
            meeting_join = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3LoginWindowIdentifier']/AXButton[@AXTitle='Join a meeting']")
            join_meeting = ActionChains(self.driver)
            join_meeting.move_to_element(meeting_join)
            join_meeting.click()
            join_meeting.perform()
            join_meeting.release()
            join_meeting.reset_actions()
            time.sleep(15)
            print("Begin input your name")
            your_name = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3MainWindowIdentifier']/AXSplitGroup[0]/AXScrollArea[0]/AXStaticText[@AXValue='Your name']")
            name_your = ActionChains(self.driver)
            name_your.move_to_element(your_name)
            name_your.click()
            name_your.send_keys(name)
            name_your.perform()
            name_your.release()
            name_your.reset_actions()
            print("Input your name successfully!!!")
            time.sleep(2)
            print("Begin input meeting address")
            meeting_address = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3MainWindowIdentifier']/AXSplitGroup[0]/AXScrollArea[0]/AXStaticText[@AXValue='Meeting Address']") 
            address_meeting = ActionChains(self.driver)
            address_meeting.move_to_element(meeting_address)
            address_meeting.click()
            address_meeting.send_keys(address)
            address_meeting.perform()
            address_meeting.release()
            address_meeting.reset_actions()
            print("Input meeting address successfully!!!")
            time.sleep(2)
            print("Begin input meeting ID")
            id_meeting = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3MainWindowIdentifier']/AXSplitGroup[0]/AXScrollArea[0]/AXStaticText[@AXValue='Meeting ID']")
            meeting_id = ActionChains(self.driver)
            meeting_id.move_to_element(id_meeting)
            meeting_id.click()
            meeting_id.send_keys(meetingid)
            meeting_id.perform()
            meeting_id.release()
            meeting_id.reset_actions()
            time.sleep(8)
            print("Input meeting ID successfully!!!")
            time.sleep(2)
            avaya_click = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXTitle='Avaya Workplace' and @AXIdentifier='UCC3MainWindowIdentifier' and @AXSubrole='AXStandardWindow']/AXSplitGroup[0]/AXStaticText[@AXValue='Avaya Workplace']")
            click_avaya = ActionChains(self.driver)
            click_avaya.move_to_element(avaya_click)
            click_avaya.click()
            click_avaya.release()
            click_avaya.reset_actions()
            time.sleep(2)
            ActionChains(self.driver).move_to_element_with_offset(avaya_click,9,0).double_click().perform()
            print("Begin button join")
            join = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3MainWindowIdentifier']/AXSplitGroup[0]/AXScrollArea[0]/AXButton[@AXTitle='Join']")
            join_1 = ActionChains(self.driver)
            join_1.move_to_element(join)
            join_1.click()
            join_1.perform()
            join_1.release()
            join_1.reset_actions()
            print("Join successfully!!!") 
        elif client == 'aea':
            print("Choose ---")
            choose_select = self.driver.find_element(By.ID,"com.avaya.android.flare:id/show_advanced_controls")
            choose_select.click()
            print("Select")
            cham_gach = self.driver.find_element(By.ID,"com.avaya.android.flare:id/activecall_advctrl_confctrl")
            cham_gach.click()
            time.sleep(8)
            print("End meeting")
            end_meeting = self.driver.find_element(By.XPATH,"//android.widget.LinearLayout[@content-desc='END MEETING']/android.widget.LinearLayout")
            end_meeting.click()
            time.sleep(5)
            print("Click OK") 
            time.sleep(5)
            ok_1 = self.driver.find_element(By.ID,"com.avaya.android.flare:id/dialog_ok_button")
            ok_1.click()
            time.sleep(8)
            print("Continue click OK")
            ok_2 = self.driver.find_element(By.ID,"com.avaya.android.flare:id/confirmation_dialog_button")
            ok_2.click()
            time.sleep(5) 
    def verify_signin(self,client):
        if client == 'win':
            select_user = self.driver.find_element(By.NAME,"Open User Dashboard")
            select_user.click()
            expected = 'auto2006000 '
            verify_name = self.driver.find_element(By.NAME,"auto2006000 ")
            actual_username = verify_name.get_attribute("Name")
            time.sleep(10)
            if expected in actual_username:
                print("Pass!>>>Username is exactly!!!")
                return True
            else: 
                print("Failed!!!")
                return False
            time.sleep(5)
        elif client == 'mac':
            select_user = self.driver.find_element(By.XPATH,"")
            select_user.click()
            expected = 'auto2006001'
            verify_name = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3ConferenceWindowIdentifier']/AXScrollArea[0]/AXTable[@AXIdentifier='UCC3AutomationConferenceRosterParticipantTableIdentifier']/AXRow[@AXSubrole='AXTableRow']/AXCell[0]/AXStaticText[@AXValue='auto2006001']")
            result = ActionChains(self.driver)
            result.move_to_element(verify_name)
            result.perform()
            result.release()
            result.reset_actions()
            actual_username = result.get_attribute("Name")
            time.sleep(5)
            if expected in actual_username:
                print("Pass!>>>Username is exactly!!!Sign in successfully")
                return True
            else: 
                print("Failed!!!")
                return False
        elif client == 'aea':
            select_user = self.driver.find_element(By.ID,"com.avaya.android.flare:id/profile_avatar")
            select_user.click()
            expected = 'auto2006002'
            verify_name = self.driver.find_element(By.ID,"com.avaya.android.flare:id/tvName")
            actual_username = verify_name.get_attribute("Name")
            time.sleep(10)
            if expected in actual_username:
                print("Pass!>>>Username is exactly!!!Sign in successfully")
                return True
            else: 
                print("Failed!!!")
                return False
            time.sleep(5)
    def verify_startmeeting(self):
        expected = "322006000"
        verify_name = self.driver.find_element(By.NAME,"322006000")
        actual_username = verify_name.get_attribute("Name")
        time.sleep(10)
        if expected in actual_username:
            print("Pass!>>>Username is exactly!!!Start meeting successfully")
            return True
        else: 
            print("Failed!!!")
            return False
        time.sleep(5)
    def verify_joinmeeting(self,client):
        if client == 'mac':
            
        elif client == 'aea':
            expected = 'auto2006002 Scopia (Me)'
            verify_name = self.driver.find_element(By.XPATH,"/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.drawerlayout.widget.DrawerLayout/android.widget.RelativeLayout/android.widget.FrameLayout[2]/android.widget.LinearLayout/android.widget.ListView/android.widget.LinearLayout[2]/android.widget.LinearLayout/android.widget.TableLayout/android.widget.TableRow/android.widget.TextView")
            actual_username = verify_name.get_attribute("Name")
            time.sleep(10)
            if expected in actual_username:
                print("Pass!>>>Username is exactly!!!Start meeting successfully")
                return True
            else: 
                print("Failed!!!")
                return False
            time.sleep(5)
    # def verify_video(self):
    #     print("Block camera for win")
    #     block_camera = self.driver.find_element(By.NAME,"Block camera")
    #     block_camera.click()
    #     print("UnBlock camera for win")
    #     unblock_camera = self.driver.find_element(By.NAME,"Unblock camera")
    #     unblock_camera.click()
    #     print("Click user for mac")
    #     click_user_mac = self.driver.find_element(By.ID,"ConferenceItem(Moderator_auto2006001 Scopia)")
    #     click_user_mac.click()
    #     print("Click button...")
    #     options_more = self.driver.find_element(By.NAME,"More options...")
    #     options_more.click()
    #     print("Block video for mac")
    #     video_block = self.driver.find_element(By.NAME,"Block video")
    #     video_block.click()
    #     print("UnBlock video for mac")
    #     video_unblock = self.driver.find_element(By.NAME,"Block video")
    #     video_unblock.click()
    #     print("Click user for android")
    #     click_user_aea = self.driver.find_element(By.NAME,"auto2006002 Scopia")
    #     click_user_aea.click()
    #     print("Click button...")
    #     options_more = self.driver.find_element(By.NAME,"More options...")
    #     options_more.click()
    #     print("Block video for android")
    #     video_block = self.driver.find_element(By.NAME,"Block video")
    #     video_block.click()
    #     print("UnBlock video for android")
    #     video_unblock = self.driver.find_element(By.NAME,"Block video")
    #     video_unblock.click()
    def verify_rejoin(self):
        expected = 'auto2006001 Scopia (Me)'
        verify_name = self.driver.find_element(By.XPATH,"/AXApplication[@AXTitle='Avaya Workplace']/AXWindow[@AXIdentifier='UCC3ConferenceWindowIdentifier']/AXScrollArea[0]/AXTable[@AXIdentifier='UCC3AutomationConferenceRosterParticipantTableIdentifier']/AXRow[@AXSubrole='AXTableRow']/AXCell[0]/AXStaticText[@AXValue='auto2006001 Scopia (Me)']")
        result = ActionChains(self.driver)
        result.move_to_element(verify_name)
        result.perform()
        result.release()
        result.reset_actions()
        actual_username = result.get_attribute("Name")
        time.sleep(5)
        if expected in actual_username:
            print("Pass!>>>Username is exactly!!!Rejoin successfully")
            return True
        else: 
            print("Failed!!!")
            return False
    def verify_participant_chat(self,client):
        if client == 'win':
            expected = "Hello"
            verify_name = self.driver.find_element(By.NAME,"Hello")
            actual_username = verify_name.get_attribute("Name")
            time.sleep(10)
            if expected in actual_username:
                print("Pass!>>>Username is exactly!!!Chat meeting successfully")
                return True
            else: 
                print("Failed!!!")
                return False
        elif client == 'mac':
            
        elif client == 'aea':
            expected = "Welcome"
            verify_name = self.driver.find_element(By.XPATH,"/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.drawerlayout.widget.DrawerLayout/android.widget.RelativeLayout/android.widget.FrameLayout[2]/android.widget.RelativeLayout/androidx.recyclerview.widget.RecyclerView/android.widget.RelativeLayout[2]/android.widget.LinearLayout[2]/android.widget.LinearLayout/android.widget.TextView")
            actual_username = verify_name.get_attribute("Name")
            time.sleep(10)
            if expected in actual_username:
                print("Pass!>>>Username is exactly!!!Chat meeting successfully")
                return True
            else: 
                print("Failed!!!")
                return False

win = WORKPLACE()
mac = WORKPLACE()
android = WORKPLACE()
win.launch_app(client='win',ip='10.102.1.22')
mac.launch_app(client='mac',ip='10.102.1.118')
android.launch_app(client='aea',ip='10.102.1.30')
win.sign_in(client='win',url="http://10.102.2.58/hfs/auto_conf_iview126.txt",username="auto2006000",password="RAPtor1234",webaddress=None,nameuser=None,passwd=None)
win.verify_signin(client='win')
mac.sign_in(client='mac',webaddress="http://10.102.2.58/hfs/auto_conf_iview126.txt",nameuser="auto2006001",passwd="RAPtor1234",url=None,username=None,password=None)
mac.verify_signin(client='mac')
android.sign_in(client='aea',url="http://10.102.2.58/hfs/auto_conf_iview126.txt",username="auto2006002",password="RAPtor1234",webaddress=None,nameuser=None,passwd=None)
android.verify_signin(client='aea')
win.start_my_meeting()
win.verify_startmeeting()
mac.join_meeting(client='mac',meetingid="322006000",name=None)
mac.verify_joinmeeting(client='mac')
android.join_meeting(client='aea',name="Khoa",meetingid="322006000")
android.verify_joinmeeting(client='aea')
win.users_block_unblock_video()
# mac.users_block_unblock_video(client='mac')
# android.users_block_unblock_video(client='aea')
win.win_share_screen()
mac.mac_leave_rejoin()
mac.verify_rejoin()
win.all_participants_chat(client='win',chat='Hello')
win.verify_participant_chat(client='win')
mac.all_participants_chat(client='mac',chat='Hi')
mac.verify_participant_chat(client='mac')
android.all_participants_chat(client='aea',chat='Welcome')
android.verify_participant_chat(client='aea')
# win.terminate_meeting(client='win')
# mac.terminate_meeting(client='mac')
# android.terminate_meeting(client='aea')